// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wulkanizacja.Service.Infrastructure.Postgres.Context;

#nullable disable

namespace Wulkanizacja.Service.Infrastructure.Migrations
{
    [DbContext(typeof(TiresDbContext))]
    partial class TiresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wulkanizacja.Service.Infrastructure.Postgres.Entities.TireRecord", b =>
                {
                    b.Property<Guid>("TireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoadIndex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ManufactureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpeedIndex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("TireTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("TireId");

                    b.HasIndex("TireTypeId");

                    b.ToTable("Tires");
                });

            modelBuilder.Entity("Wulkanizacja.Service.Infrastructure.Postgres.Entities.TireTypeRecord", b =>
                {
                    b.Property<short>("TireTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("TireTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TireTypeId");

                    b.ToTable("TireTypes");

                    b.HasData(
                        new
                        {
                            TireTypeId = (short)1,
                            Name = "Letnia"
                        },
                        new
                        {
                            TireTypeId = (short)2,
                            Name = "Zimowa"
                        },
                        new
                        {
                            TireTypeId = (short)3,
                            Name = "Całoroczna"
                        });
                });

            modelBuilder.Entity("Wulkanizacja.Service.Infrastructure.Postgres.Entities.TireRecord", b =>
                {
                    b.HasOne("Wulkanizacja.Service.Infrastructure.Postgres.Entities.TireTypeRecord", "TireType")
                        .WithMany()
                        .HasForeignKey("TireTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TireType");
                });
#pragma warning restore 612, 618
        }
    }
}
